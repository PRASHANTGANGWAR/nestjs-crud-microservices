{
  "openapi": "3.0.0",
  "paths": {
    "/": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "UserController_create",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API Key for authentication",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "User data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              },
              "examples": {
                "example": {
                  "summary": "Example user",
                  "value": {
                    "firstName": "Monica",
                    "lastName": "Geller",
                    "email": "monica@gmail.com",
                    "phoneNumber": "9999999999"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Validation failed"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new user",
        "tags": [
          "users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "operationId": "UserController_getUserById",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API Key for authentication",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user by ID",
        "tags": [
          "users"
        ]
      },
      "patch": {
        "operationId": "UserController_updateUserById",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API Key for authentication",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update user by ID",
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "UserController_deleteUserById",
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "description": "API Key for authentication",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete user by ID",
        "tags": [
          "users"
        ]
      }
    }
  },
  "info": {
    "title": "User Service API",
    "description": "Microservice for user management",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "users",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    },
    "schemas": {
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Monica",
            "description": "User first name",
            "minLength": 1,
            "maxLength": 40
          },
          "lastName": {
            "type": "string",
            "example": "Geller",
            "description": "User last name",
            "minLength": 1,
            "maxLength": 40
          },
          "email": {
            "type": "string",
            "example": "monica@gmail.com",
            "description": "User email address"
          },
          "phoneNumber": {
            "type": "string",
            "example": "9999999999",
            "description": "User phone number (10 digits)",
            "pattern": "^\\d{10}$"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email",
          "phoneNumber"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Monica",
            "description": "User first name",
            "minLength": 1,
            "maxLength": 40
          },
          "lastName": {
            "type": "string",
            "example": "Geller",
            "description": "User last name",
            "minLength": 1,
            "maxLength": 40
          },
          "email": {
            "type": "string",
            "example": "monica@gmail.com",
            "description": "User email address"
          },
          "phoneNumber": {
            "type": "string",
            "example": "9999999999",
            "description": "User phone number (10 digits)",
            "pattern": "^\\d{10}$"
          }
        }
      }
    }
  }
}